// <auto-generated />
using System;
using DatingService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211115214207_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserChat");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasFilter("[AvatarId] IS NOT NULL");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "990095f8-09df-4529-a705-12b3ce59e8e5",
                            DateOfBirth = new DateTime(2001, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kirill.rylkov.2001@gmail.comm",
                            EmailConfirmed = true,
                            FirstName = "Kirill",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Rylkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            NormalizedUserName = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFgtxAmz3oPrie1iCv2vJ7dJEKS1ysB6bOVxxCIQRklVop3v7zXO6NGUTlp1d8I/Zg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "560c0673-b1bf-4a14-87ac-e48d83896786",
                            TwoFactorEnabled = false,
                            UserName = "kirill.rylkov.2001@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b72abb26-30ee-4fbd-843e-c1c9712f7f2a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c93e69b4-dea5-4fb5-bfd6-1890052528a9",
                            DateOfBirth = new DateTime(1985, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MaximSkvortsov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maxim",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Skvortsov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIMSKVORTSOV@GMAIL.COM",
                            NormalizedUserName = "MAXIMSKVORTSOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECIY8dsWCk5j2YSi9wZXoY1vqGOrLEGGF9wA8Wkjnw5LUkWMLtVixyPJj+vjvGJGig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a8ea673-0946-4396-b2bd-a3a61741f1f1",
                            TwoFactorEnabled = false,
                            UserName = "MaximSkvortsov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("19678e73-2240-43c1-bc08-726405e9810f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50564ce8-fa9c-4bb6-971c-6bbe22d766a8",
                            DateOfBirth = new DateTime(1970, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TimofeyFedorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Timofey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Fedorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOFEYFEDOROV@GMAIL.COM",
                            NormalizedUserName = "TIMOFEYFEDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAV+PdkOEr9uSNCln/7jjPpTcUcddeO29dyNtXAHopgq/r0CD99kLm+gEe0Z2HK8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "177b1cd5-f92b-4b85-9e7c-fd7a5ff5bacc",
                            TwoFactorEnabled = false,
                            UserName = "TimofeyFedorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("959fad98-c404-4b2e-a4b5-2da34b051182"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b23ac5b8-c495-43f9-a281-4b4758b784a7",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NikitaSidorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Sidorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKITASIDOROV@GMAIL.COM",
                            NormalizedUserName = "NIKITASIDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENsZb+LUGvL6S0UJBMT1hKD48YyAyBu73zdKzEGoAWOWiyLiJRv3CUQFEmgkoZfL7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be3a097a-5cae-45e8-a22c-e125bd6cbbce",
                            TwoFactorEnabled = false,
                            UserName = "NikitaSidorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a2c8f466-4460-46d9-a3e1-849542257eda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58aa23db-883a-46d8-921c-9e2892d1b887",
                            DateOfBirth = new DateTime(1986, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexeyShapavalov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Shapavalov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            NormalizedUserName = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF00KqggKrVN7WeIyYYdLtF0H9JXbGDwJgyWG9uXkDS1U0KJ3lueB89pozcWLnE1Ew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93477335-5ae5-4a9d-b8c2-a326786ef14d",
                            TwoFactorEnabled = false,
                            UserName = "AlexeyShapavalov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("15bce5d6-b3c2-431b-ac4b-7d87d86de00e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f07d84ff-a462-4d37-af4d-10367145136c",
                            DateOfBirth = new DateTime(1954, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GeorgeKlimov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "George",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Klimov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGEKLIMOV@GMAIL.COM",
                            NormalizedUserName = "GEORGEKLIMOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKVb9z0pvNZ0elXjpcgA8QUoMtbpsfErG+NlE0JUNjVLoOk0oZSY8Vi1NJD4iIwtaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce32019e-d9da-4f6d-8402-fa31b7602843",
                            TwoFactorEnabled = false,
                            UserName = "GeorgeKlimov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("186fdbe7-3b56-47bf-9e4b-3ec743375e8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1ac4bc8-ce3a-4cdb-b0e3-53ea28665315",
                            DateOfBirth = new DateTime(1980, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexanderBalashov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexander",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Balashov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDERBALASHOV@GMAIL.COM",
                            NormalizedUserName = "ALEXANDERBALASHOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENF2JBCTLDSQWrfIKHXr6bHOko/osgooOKkTKabFNgrGKEt8OXHz1zD+wKxgnuROvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "714bd9c7-9fcf-43e8-923a-35c971ad0e27",
                            TwoFactorEnabled = false,
                            UserName = "AlexanderBalashov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("424801eb-4028-47de-b02e-b2260e4adbaf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "326d0360-0e5b-4995-b40f-2fc02aa1542b",
                            DateOfBirth = new DateTime(2005, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DmitriiGusev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dmitrii",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Gusev",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRIIGUSEV@GMAIL.COM",
                            NormalizedUserName = "DMITRIIGUSEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPsHy7s5HRL4eMlMZkLp+sYgmZ8B3uGIlzJ8lK6oEA5HP4FY0Xn4XiUHX5BTih1sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b059548-360d-4399-8c30-75020867fdee",
                            TwoFactorEnabled = false,
                            UserName = "DmitriiGusev@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ea66d92d-2dba-48dc-a240-5d20b653223b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "012f59c5-f798-46d3-ac6e-ddf776a65e33",
                            DateOfBirth = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ArtemOvchinnikov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Artem",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Ovchinnikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            NormalizedUserName = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8d2TlPvODZy+cBF37wwJKgoXRUXdbesxjYUPvWZzycSAJT3NZEWJ9mBX9cPea/Ig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "470e1ff2-b80b-413e-8537-44d23eef3e1d",
                            TwoFactorEnabled = false,
                            UserName = "ArtemOvchinnikov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9041f759-c64b-4320-b85b-2332fff4ed85"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "287afd54-8274-4c47-a6e8-dd5205613591",
                            DateOfBirth = new DateTime(2002, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "LeonidTarasov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leonid",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Tarasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONIDTARASOV@GMAIL.COM",
                            NormalizedUserName = "LEONIDTARASOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECMdz4cd+jV81XKJp4KkFrpoBodAHQHnPPqb82W8/5hEWcniIxmjkJ+Y+heUSvwXlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a588b6d2-1080-49f2-8cca-93f1c09cad75",
                            TwoFactorEnabled = false,
                            UserName = "LeonidTarasov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d2d6dc46-025c-4034-80c8-8bb7e1d54098"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bc50ff8-ef3b-4c72-8508-8eb312dd0a9f",
                            DateOfBirth = new DateTime(2007, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarkMarkov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Markov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKMARKOV@GMAIL.COM",
                            NormalizedUserName = "MARKMARKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxkS1lL7H71eWJAlCMFd4wxSr6o5nrmfXCQtc+Dpa5gWdiCxSlVXDNXbR/Gznq1/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ccce7f4-b37c-4ee7-9b43-f24675cad036",
                            TwoFactorEnabled = false,
                            UserName = "MarkMarkov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9410107f-8e37-45a7-8d3a-bcabb2abda45"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7c8bcc1-f212-41ad-a092-f90142246df1",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaFilatova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Filatova",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAFILATOVA@GMAIL.COM",
                            NormalizedUserName = "POLINAFILATOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEjpFbSQqm3eDviHBwD5aL1sumphtXuY0JnvAb9w0qJd1vh2gMFAIEplZxqVpjzwVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "49119a9f-33d9-4c15-938c-07a6b2ae995a",
                            TwoFactorEnabled = false,
                            UserName = "PolinaFilatova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bdb4c580-01ee-41c4-93f9-6d64a4778370"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70f84c51-8ff9-4ef1-8792-f375f378ae63",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaPopova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Popova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAPOPOVA@GMAIL.COM",
                            NormalizedUserName = "ANNAPOPOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECgziCQBENbvdD37UuJcYiluaELKy+6pcT/auHldP5Ptho/Pq/uldZVbZIF5Empyyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cee5968-a2eb-48a0-a828-a8032ced77b2",
                            TwoFactorEnabled = false,
                            UserName = "AnnaPopova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("abc953f6-d6ff-464b-9539-c95ee111f006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8dab52a-d394-4c63-84ca-9bc68faf6306",
                            DateOfBirth = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaSolovyeva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Solovyeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNASOLOVYEVA@GMAIL.COM",
                            NormalizedUserName = "ANNASOLOVYEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbNVXrjNSJLajXj2L95HgPexRkxRImSKh2MCy6eSkKCGtvSsphqt4RVH3QIZCiUww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c33bfc6-b9a1-48aa-91cf-90fc6b9536d8",
                            TwoFactorEnabled = false,
                            UserName = "AnnaSolovyeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7d8780f7-15b4-4b56-91e1-6d6e16012477"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a497aeaa-c099-40b6-b1be-19ee72a1816f",
                            DateOfBirth = new DateTime(1965, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaKarenina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Karenina",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAKARENINA@GMAIL.COM",
                            NormalizedUserName = "ANNAKARENINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELju2523gZzHyDKbFXV2sgm+qogrXM3MsglJTFklL2GRG6/9zMtoFAylVE88eSjjdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d01d71d6-b9a1-467a-966b-1df575d925e1",
                            TwoFactorEnabled = false,
                            UserName = "AnnaKarenina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ffb5bbe2-debf-4f3f-805e-32167b700e4a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ab5a588-25a5-4888-9a47-562a1974dce9",
                            DateOfBirth = new DateTime(1975, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaGrishina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Grishina",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAGRISHINA@GMAIL.COM",
                            NormalizedUserName = "POLINAGRISHINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBpI+1w7/4U0AFWTmhQj6YF3r7py0RdEPTIHWM/X9SnIQJ0BXGpkiyr8dmkSwHraHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "628b2b28-13bf-4666-8baf-a50f6b904386",
                            TwoFactorEnabled = false,
                            UserName = "PolinaGrishina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1caabeb4-fa16-46c9-8ef0-e8009955d916"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae7a47ac-a246-4414-be1a-cee9ae592022",
                            DateOfBirth = new DateTime(2000, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DaryaNikitina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Nikitina",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARYANIKITINA@GMAIL.COM",
                            NormalizedUserName = "DARYANIKITINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEARwsqLWnXf3bvSG6uE6XMutzPkPlCru68WBNZ4omD1/QGVNdK5odPWGbnI0e9dOnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7f099b8-5ddd-487d-ac14-2c4acf234d1e",
                            TwoFactorEnabled = false,
                            UserName = "DaryaNikitina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a3e0cceb-a4b9-4877-b3a0-b7991d1a45f2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb9cdad1-db1b-4c8f-a7e3-66cbe5a3a293",
                            DateOfBirth = new DateTime(1991, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "EvaAndreevaa@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eva",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Andreeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVAANDREEVA@GMAIL.COM",
                            NormalizedUserName = "EVAANDREEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJTtypZZpsGFOxTPXk+ZufoO873ZbIwvRVjEBOu5eYYAaUYQ8PrpCuaW4+TT335SAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db814305-a37a-4e65-bc88-7e21f47c90a4",
                            TwoFactorEnabled = false,
                            UserName = "EvaAndreeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("13765215-c5c6-4dfe-a8e5-5b51300e8f69"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19f5188a-6ed3-48f1-862a-63bf514cabd6",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MilanaErmakova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Milana",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ermakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILANAERMAKOVA@GMAIL.COM",
                            NormalizedUserName = "MILANAERMAKOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBxySSmxTcgMIot0OmTGS3Gq5V7OZ9JwBBIQk6wT4ucA0wEfp97oi0A9W7XJVozxbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3301082e-c080-4adb-af7a-9015ae87868f",
                            TwoFactorEnabled = false,
                            UserName = "MilanaErmakova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("be6f2919-9dca-4b54-a788-02cef50c6b1b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1adb2ea0-f6a2-4a0a-acd7-3bdaca1d7651",
                            DateOfBirth = new DateTime(1961, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlisaGorbacheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisa",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Gorbacheva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISAGORBACHEVA@GMAIL.COM",
                            NormalizedUserName = "ALISAGORBACHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGkf1SS6vnQfbvgO3TZ3JrwUXArcnd/NPwgZn4o+TLY1B+m/GeG+3P5KMCjd7NqolA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab557a5e-2f9d-4f00-b448-ea23d2e57478",
                            TwoFactorEnabled = false,
                            UserName = "AlisaGorbacheva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b587585c-344b-4e35-9df0-90723c5114ba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fab5435e-8fb9-477a-a9fd-cf78b885cb40",
                            DateOfBirth = new DateTime(1999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SofiyaIvanova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sofiya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIYAIVANOVA@GMAIL.COM",
                            NormalizedUserName = "SOFIYAIVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELnrPJD2MVRdI412f+5qtN3Kq08yGUEemSHb5SoVRPCkWOZPC48AlO4qW/N+nCWQ8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c834b9a6-cf99-48c4-8d43-213033335a57",
                            TwoFactorEnabled = false,
                            UserName = "SofiyaIvanova@gmail.com"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Auth.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            DateCreated = new DateTime(2021, 11, 15, 21, 42, 6, 590, DateTimeKind.Utc).AddTicks(7822),
                            DateUpdated = new DateTime(2021, 11, 15, 21, 42, 6, 590, DateTimeKind.Utc).AddTicks(7831),
                            Name = "Man"
                        },
                        new
                        {
                            Id = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            DateCreated = new DateTime(2021, 11, 15, 21, 42, 6, 590, DateTimeKind.Utc).AddTicks(8568),
                            DateUpdated = new DateTime(2021, 11, 15, 21, 42, 6, 590, DateTimeKind.Utc).AddTicks(8570),
                            Name = "Woman"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c"),
                            ConcurrencyStamp = "869e93f6-79a4-45aa-a783-1e89d13554eb",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d821eb23-2337-4e31-a53d-fcec01900507"),
                            ConcurrencyStamp = "61915774-1c0c-4637-ad0f-2472fd03b20d",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            RoleId = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.Avatar", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("DatingService.Domain.Auth.ApplicationUser", "AvatarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Avatar");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DatingService.Domain.Entities.Image", "Image")
                        .WithOne("Post")
                        .HasForeignKey("DatingService.Domain.Entities.Post", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentRequests");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.Avatar", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
