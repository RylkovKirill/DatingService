// <auto-generated />
using System;
using DatingService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserChat");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PostCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasFilter("[AvatarId] IS NOT NULL");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1560d324-817f-4cbb-830f-2ca34f3b4c6a",
                            DateOfBirth = new DateTime(2001, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kirill.rylkov.2001@gmail.comm",
                            EmailConfirmed = true,
                            FirstName = "Kirill",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Rylkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            NormalizedUserName = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENpT3z0wj34PnfPjjvm3OD/TSc4G3ER4c4+jQpdc/YvjJcLVWL5aBzx2UHWZnef/BA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "9b3c0277-b21c-4a28-928e-2c00053c597e",
                            TwoFactorEnabled = false,
                            UserName = "kirill.rylkov.2001@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b72abb26-30ee-4fbd-843e-c1c9712f7f2a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9a1396b-73ca-4685-aeec-143233bb7dc6",
                            DateOfBirth = new DateTime(1985, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MaximSkvortsov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maxim",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Skvortsov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIMSKVORTSOV@GMAIL.COM",
                            NormalizedUserName = "MAXIMSKVORTSOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIpSKxMoo9zP/IekJlj3TwuwQN56MEv+lhumtniAfa1kfKWV/w/+tLaxmEES3zkcdQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "c72c1e27-4042-4182-ade3-f754009a3d7f",
                            TwoFactorEnabled = false,
                            UserName = "MaximSkvortsov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("19678e73-2240-43c1-bc08-726405e9810f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0196f17-029a-4c24-a042-521e62adea81",
                            DateOfBirth = new DateTime(1970, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TimofeyFedorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Timofey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Fedorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOFEYFEDOROV@GMAIL.COM",
                            NormalizedUserName = "TIMOFEYFEDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEqToBLpmERRJGKb6gWYUnRCh3iM8Q+RiGLzZUeoUJ62kEXdyYQFps8cA0m98qUCUw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "f9e4aa83-5a32-480d-a5ae-3c2da81f1ce2",
                            TwoFactorEnabled = false,
                            UserName = "TimofeyFedorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("959fad98-c404-4b2e-a4b5-2da34b051182"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c43b7099-28fe-4e9a-a9f8-14b165801158",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NikitaSidorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Sidorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKITASIDOROV@GMAIL.COM",
                            NormalizedUserName = "NIKITASIDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEEAqE1XyA8l5i/MSl3xucfnmOlgSBMoMUEpBl7Jy5wERtf6b0PpuIPfBiNKb0orvA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "b85747f0-7d7d-4245-acad-7b74b9aac8db",
                            TwoFactorEnabled = false,
                            UserName = "NikitaSidorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a2c8f466-4460-46d9-a3e1-849542257eda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "807db56e-1052-4f32-8cf1-bfa0aa48f042",
                            DateOfBirth = new DateTime(1986, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexeyShapavalov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Shapavalov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            NormalizedUserName = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEu62VcEpTNY9IlzoAxtiprbsOUvHimg9pdAFxaDvIvNiXpLxh8pWLhbBq+WIVykg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "90a610a1-2387-45eb-a49a-fa8ce88d96cc",
                            TwoFactorEnabled = false,
                            UserName = "AlexeyShapavalov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("15bce5d6-b3c2-431b-ac4b-7d87d86de00e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98e6dbc6-148c-47b3-a2d4-ee6abe7a39a5",
                            DateOfBirth = new DateTime(1954, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GeorgeKlimov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "George",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Klimov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGEKLIMOV@GMAIL.COM",
                            NormalizedUserName = "GEORGEKLIMOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEItCwXP+34Wlf1gWc5QPz3wo6+zJvI+KCJKEgxYSmHD/SvWClSmzEn9E9T5sSN1Sxg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "870c10d4-9b61-461f-8742-c609b5429acd",
                            TwoFactorEnabled = false,
                            UserName = "GeorgeKlimov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("186fdbe7-3b56-47bf-9e4b-3ec743375e8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c96d668-b30c-4453-9af9-38fc2aaf461e",
                            DateOfBirth = new DateTime(1980, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexanderBalashov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexander",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Balashov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDERBALASHOV@GMAIL.COM",
                            NormalizedUserName = "ALEXANDERBALASHOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKlgbRfk5v4x6MXMqAvLRvcOybKygDYRv5AvVkln1FkJZrz6tEHWfnLO8zU/rkUUUA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "81b17e0c-91ac-43ef-b923-4c172fcbfe8e",
                            TwoFactorEnabled = false,
                            UserName = "AlexanderBalashov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("424801eb-4028-47de-b02e-b2260e4adbaf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "792cb35d-14f0-49c5-9928-71f51c44a876",
                            DateOfBirth = new DateTime(2005, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DmitriiGusev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dmitrii",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Gusev",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRIIGUSEV@GMAIL.COM",
                            NormalizedUserName = "DMITRIIGUSEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9lfwy5Ao4KqumYqwZXnkeLv8OWksFS/73oxATDBZBKYg6/dXjTLXX1mg/B7hqNMQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "0db0200a-c774-4711-bf86-a448839604a8",
                            TwoFactorEnabled = false,
                            UserName = "DmitriiGusev@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ea66d92d-2dba-48dc-a240-5d20b653223b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cda9de53-070b-4bba-8c55-24a2ca5ec59b",
                            DateOfBirth = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ArtemOvchinnikov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Artem",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Ovchinnikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            NormalizedUserName = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL4nTUKgSiUO+4ljqgcv5/AoXgUrCg0yjvZfGrbcXepEVoNdFkIBjyleL53bIxd0UA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "385e2b40-c6c3-4a7d-8daa-ec0812ba52ac",
                            TwoFactorEnabled = false,
                            UserName = "ArtemOvchinnikov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9041f759-c64b-4320-b85b-2332fff4ed85"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b85473fc-d9c4-44e7-959c-f0d2827f1859",
                            DateOfBirth = new DateTime(2002, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "LeonidTarasov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leonid",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Tarasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONIDTARASOV@GMAIL.COM",
                            NormalizedUserName = "LEONIDTARASOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAhJA47aeOS2OnWOM1R1qJlWCd4e8HG+803kCg5VJ1MAvRJJ4LhWYl2M/WCoSv+sXQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "ce12bdfa-dd4e-494c-83de-7fd476048258",
                            TwoFactorEnabled = false,
                            UserName = "LeonidTarasov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d2d6dc46-025c-4034-80c8-8bb7e1d54098"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7154b59e-fcb3-414c-aa04-9ba96ee33081",
                            DateOfBirth = new DateTime(2007, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarkMarkov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Markov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKMARKOV@GMAIL.COM",
                            NormalizedUserName = "MARKMARKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED5OjWKmjmH01B5lGDI2LbnPWqYTOxowHmIMZDBuBlgP7mvqDok/JkVNBsZo+1F2aQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "a1405de6-dcc4-4a0c-9934-95bcaae6efbe",
                            TwoFactorEnabled = false,
                            UserName = "MarkMarkov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9410107f-8e37-45a7-8d3a-bcabb2abda45"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "822360f2-822a-4433-b862-5e4fc14fa2a4",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaFilatova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Filatova",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAFILATOVA@GMAIL.COM",
                            NormalizedUserName = "POLINAFILATOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDEVxT9KkDaw3Fbocrn3tqUcDZj2nZ0P7cemQ4Km6X/t2y9E9X4J66C9x7680Cvz4w==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "3feff3e5-9fb7-4097-a401-831cb93c4f1b",
                            TwoFactorEnabled = false,
                            UserName = "PolinaFilatova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bdb4c580-01ee-41c4-93f9-6d64a4778370"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a69de9f-9ba6-4d1f-b28e-897ad69bad52",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaPopova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Popova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAPOPOVA@GMAIL.COM",
                            NormalizedUserName = "ANNAPOPOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN3gDjv1oLtehHvopHm/Uz/q/5Hw0CKOXT6Rt3rWo1icj2lTWuWB6F7AMRyMxu6mXw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "360402af-c8e9-4fc7-aee1-0da9991592ad",
                            TwoFactorEnabled = false,
                            UserName = "AnnaPopova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("abc953f6-d6ff-464b-9539-c95ee111f006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36fe1d1f-fdd8-42d0-9512-456963bbe456",
                            DateOfBirth = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaSolovyeva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Solovyeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNASOLOVYEVA@GMAIL.COM",
                            NormalizedUserName = "ANNASOLOVYEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIOD5GJghsWpT2XpaJvLAktp17HofV/9xkxPuqlZ6VgDjj54CYnJCodhXw6hs8lLjw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "bfb9a24e-e1dc-4e07-98a8-480ef957e20f",
                            TwoFactorEnabled = false,
                            UserName = "AnnaSolovyeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7d8780f7-15b4-4b56-91e1-6d6e16012477"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7bb5c17c-0d3a-4156-9a03-4fcbf7ec353a",
                            DateOfBirth = new DateTime(1965, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaKarenina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Karenina",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAKARENINA@GMAIL.COM",
                            NormalizedUserName = "ANNAKARENINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK7jpCs1d5Gar+DB5J0E/4y2f9BThSL9ha8DJZ7J3I/iM7b4Zk+d3intLW8Rkeo+/A==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "c8ba63f4-0a5b-48c1-8f50-e5ba798c2e75",
                            TwoFactorEnabled = false,
                            UserName = "AnnaKarenina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ffb5bbe2-debf-4f3f-805e-32167b700e4a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d63f4f78-e715-4ab3-9818-1bdd25f74e7b",
                            DateOfBirth = new DateTime(1975, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaGrishina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Grishina",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAGRISHINA@GMAIL.COM",
                            NormalizedUserName = "POLINAGRISHINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHudsRwMnKcfx7g8oqtj+iCyN4qg3Gu13y9uXjwNAzHwdy1vcxo2WPVfbWGpwzsalQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "fee1182e-7455-43ed-a1a3-1eaf618ead3e",
                            TwoFactorEnabled = false,
                            UserName = "PolinaGrishina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1caabeb4-fa16-46c9-8ef0-e8009955d916"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08122719-9880-42a6-aaae-db7f40c9363a",
                            DateOfBirth = new DateTime(2000, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DaryaNikitina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Nikitina",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARYANIKITINA@GMAIL.COM",
                            NormalizedUserName = "DARYANIKITINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOirO85KzlF0DCavKj8PUV1BLA2nt7tuICntrNaYD7FIkX+HRq0bhzOiV1AcR5CbGg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "74ae0a2e-13f5-4cd7-ab21-7b3bc7b3ae8a",
                            TwoFactorEnabled = false,
                            UserName = "DaryaNikitina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a3e0cceb-a4b9-4877-b3a0-b7991d1a45f2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7abe89a3-8cf6-4547-95d8-ba778b775834",
                            DateOfBirth = new DateTime(1991, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "EvaAndreevaa@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eva",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Andreeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVAANDREEVA@GMAIL.COM",
                            NormalizedUserName = "EVAANDREEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvDQ8mn2wyynLlYnECsclsmCvJGRCOuUbxH2VjEO57OYGwxjt947rGHCnGD+Q+D4w==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "ccbd0ae4-0a06-4f82-9120-c882d87d75b3",
                            TwoFactorEnabled = false,
                            UserName = "EvaAndreeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("13765215-c5c6-4dfe-a8e5-5b51300e8f69"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cad6fc99-6d2c-4973-ae03-cdbde98dcf40",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MilanaErmakova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Milana",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ermakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILANAERMAKOVA@GMAIL.COM",
                            NormalizedUserName = "MILANAERMAKOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIlAv2Sp0asY9RNS/Cts4rF1i7R8/TFG0ocEsvtw3uWckfy07h+LVCeC4oet6bj/lw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "3c5c3f31-15a2-4930-a471-0c94ace8e4be",
                            TwoFactorEnabled = false,
                            UserName = "MilanaErmakova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("be6f2919-9dca-4b54-a788-02cef50c6b1b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a97f0a1b-12ac-45b1-b5b7-41e3b9676b5f",
                            DateOfBirth = new DateTime(1961, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlisaGorbacheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisa",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Gorbacheva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISAGORBACHEVA@GMAIL.COM",
                            NormalizedUserName = "ALISAGORBACHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI6/knZ/sfaewq/JUWV/zZs5ns6tw8RgA3BxkPqfhEnyIXegvptl3oXwsFdGutSL3Q==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "515c95ff-80c6-480d-a74e-c87a9c28b710",
                            TwoFactorEnabled = false,
                            UserName = "AlisaGorbacheva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b587585c-344b-4e35-9df0-90723c5114ba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "265c6d18-94e2-4b04-a898-a0e1221ed28c",
                            DateOfBirth = new DateTime(1999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SofiyaIvanova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sofiya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIYAIVANOVA@GMAIL.COM",
                            NormalizedUserName = "SOFIYAIVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJSehmxTbtsHnFCtBZ8UhuR8Zr69E8RckpzBj8DpAyUMvIrQPGb7P5oVmVGhhTh0vQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "4d4415ba-9931-42f7-b903-9f3efc8d2e67",
                            TwoFactorEnabled = false,
                            UserName = "SofiyaIvanova@gmail.com"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Auth.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 404, DateTimeKind.Utc).AddTicks(2432),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 404, DateTimeKind.Utc).AddTicks(2445),
                            Name = "Man"
                        },
                        new
                        {
                            Id = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 404, DateTimeKind.Utc).AddTicks(3455),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 404, DateTimeKind.Utc).AddTicks(3459),
                            Name = "Woman"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("SenderId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c8b430f-99bf-460d-903e-198728353a72"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7160),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7170),
                            Name = "Контент сексуального характера"
                        },
                        new
                        {
                            Id = new Guid("0d50b5d6-2274-4f74-a478-7671242e1348"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7640),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7643),
                            Name = "Жестокие или отталкивающие сцены"
                        },
                        new
                        {
                            Id = new Guid("83ba1239-4ef7-44a7-ae91-c5c9d0e6c100"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7655),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7656),
                            Name = "Оскорбления или проявления нетерпимости"
                        },
                        new
                        {
                            Id = new Guid("06568472-51b4-4292-b7e0-a220b789c885"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7661),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7662),
                            Name = "Вредные или опасные действия"
                        },
                        new
                        {
                            Id = new Guid("520eeb61-256a-4edd-9476-5fbe69cc3f20"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7665),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7666),
                            Name = "Жестокое обращение с детьми"
                        },
                        new
                        {
                            Id = new Guid("516fff94-dfd1-4c94-bebd-9498048eac3d"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7671),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7672),
                            Name = "Нарушение моих прав"
                        },
                        new
                        {
                            Id = new Guid("bacc901a-c8fd-4f8c-b4f7-30e8a5b0d502"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7675),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7676),
                            Name = "Пропаганда терроризма"
                        },
                        new
                        {
                            Id = new Guid("7eca2608-2bf8-482b-a630-8e7eb2bc8724"),
                            DateCreated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7679),
                            DateUpdated = new DateTime(2021, 11, 22, 11, 11, 51, 614, DateTimeKind.Utc).AddTicks(7680),
                            Name = "Спам или ложная информация"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c"),
                            ConcurrencyStamp = "b2e275d4-89e9-4e34-9c4a-667696f4d712",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d821eb23-2337-4e31-a53d-fcec01900507"),
                            ConcurrencyStamp = "f626c9bb-d2d2-41b5-ab79-4646b1bc9e76",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            RoleId = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.Avatar", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("DatingService.Domain.Auth.ApplicationUser", "AvatarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Avatar");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DatingService.Domain.Entities.Image", "Image")
                        .WithOne("Post")
                        .HasForeignKey("DatingService.Domain.Entities.Post", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedReports")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Entities.ReportCategory", "Category")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentReports")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedReports");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentReports");

                    b.Navigation("SentRequests");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.Avatar", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
