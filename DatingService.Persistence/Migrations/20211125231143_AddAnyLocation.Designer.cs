// <auto-generated />
using System;
using DatingService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211125231143_AddAnyLocation")]
    partial class AddAnyLocation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserChat");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AnyLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PostCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "d285a961-ae04-45fb-8465-789d941fbf4f",
                            DateOfBirth = new DateTime(2001, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kirill.rylkov.2001@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kirill",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Rylkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            NormalizedUserName = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENBC6UCk4BseypPh/JuQYDhPV17iqO6SeB29jrLASVz7G9igHeGqM96lPvwIp2IkVg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "1909d6b7-b222-4fa4-85e9-fa4584c8a8a7",
                            TwoFactorEnabled = false,
                            UserName = "kirill.rylkov.2001@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b72abb26-30ee-4fbd-843e-c1c9712f7f2a"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "1e31e2cc-efd5-4580-b9fa-28f3702340d7",
                            DateOfBirth = new DateTime(1985, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MaximSkvortsov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maxim",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Skvortsov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIMSKVORTSOV@GMAIL.COM",
                            NormalizedUserName = "MAXIMSKVORTSOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEDssCtve+Diq6iyAaoOHXRJxP/cnkA1MDWgqZXx8IlmL7+kU83F1R75g8qir2Cxdw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "800b928f-24d1-4efb-876c-cf40f720c0b2",
                            TwoFactorEnabled = false,
                            UserName = "MaximSkvortsov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("19678e73-2240-43c1-bc08-726405e9810f"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "85536c3e-e7ba-40e5-a815-1b4afd093b19",
                            DateOfBirth = new DateTime(1970, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TimofeyFedorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Timofey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Fedorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOFEYFEDOROV@GMAIL.COM",
                            NormalizedUserName = "TIMOFEYFEDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELQxTIY3NY6e9O2cyImtLTNLg46fD03eo6C/pwMnqapC4P3F/ngiUjJmECRN5If59w==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "8de7e918-1f06-44a0-89b3-f3c8faf76358",
                            TwoFactorEnabled = false,
                            UserName = "TimofeyFedorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("959fad98-c404-4b2e-a4b5-2da34b051182"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "ef22b9e3-a97c-4a53-98f8-82082fd16075",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NikitaSidorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Sidorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKITASIDOROV@GMAIL.COM",
                            NormalizedUserName = "NIKITASIDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPj0GbIgwiOFixU4K/fnHZ4lFDN7Q4Nz9D0ciTnPT6rRXzq03wyeRzmPxbch05nCow==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "2e9ca892-45cb-4004-8001-41789a4ba04b",
                            TwoFactorEnabled = false,
                            UserName = "NikitaSidorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a2c8f466-4460-46d9-a3e1-849542257eda"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "1153e4dc-692d-4b8e-a096-1f7fcaf2d48b",
                            DateOfBirth = new DateTime(1986, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexeyShapavalov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Shapavalov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            NormalizedUserName = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMywUNyBrZttwdo1EE8+FwwcniLW7Fv4xX+1Es1IRRtDHm7gMcsYu7QoQ24ddkvBpA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "565fc9e8-3e56-4d92-8716-ee91ec32601a",
                            TwoFactorEnabled = false,
                            UserName = "AlexeyShapavalov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("15bce5d6-b3c2-431b-ac4b-7d87d86de00e"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "03319783-69dc-4542-a5b9-f3aee697e3f3",
                            DateOfBirth = new DateTime(1954, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GeorgeKlimov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "George",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Klimov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGEKLIMOV@GMAIL.COM",
                            NormalizedUserName = "GEORGEKLIMOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJb7oJcaOcqLnTgPM7LVYk7UHgRkBC2bD45lSrSSFdLMLrHrXtK/C1ud4niYnihEew==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "0383ba61-f38e-485d-b392-3d02b05f162d",
                            TwoFactorEnabled = false,
                            UserName = "GeorgeKlimov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("186fdbe7-3b56-47bf-9e4b-3ec743375e8e"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "b6c829c2-40ce-4578-8f80-e06b65c8de23",
                            DateOfBirth = new DateTime(1980, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexanderBalashov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexander",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Balashov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDERBALASHOV@GMAIL.COM",
                            NormalizedUserName = "ALEXANDERBALASHOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPBiLxYbn1eUJQ7KPJPp7IwJuaH4QOEp9Hdvpssu5hUNmd6H+2BLyA3eP/2R6Z2hpA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "57a16f3d-94dd-4f02-8155-a81277a04cff",
                            TwoFactorEnabled = false,
                            UserName = "AlexanderBalashov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("424801eb-4028-47de-b02e-b2260e4adbaf"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "4e6a3809-56f3-4390-82f7-149aa4e21469",
                            DateOfBirth = new DateTime(2005, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DmitriiGusev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dmitrii",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Gusev",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRIIGUSEV@GMAIL.COM",
                            NormalizedUserName = "DMITRIIGUSEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEInLbjmufXr2UDUvNYkYmmZJrKYPlJ06WKd3NGUhDgDDHacENr7RcbpC96/Y/PqSJg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "4fd8893e-0880-42c9-ac35-21d12804f609",
                            TwoFactorEnabled = false,
                            UserName = "DmitriiGusev@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ea66d92d-2dba-48dc-a240-5d20b653223b"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "ab576353-102b-40c4-874e-bb936a2c995e",
                            DateOfBirth = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ArtemOvchinnikov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Artem",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Ovchinnikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            NormalizedUserName = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPD1bxOdFEJZ2xJ4ekzwWm/1/ngK+YuGd2b/nGti426CSA/x/A5b+giRKNx2iyuF2g==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "191d9eea-9314-4129-ab5d-40abeb527a6f",
                            TwoFactorEnabled = false,
                            UserName = "ArtemOvchinnikov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9041f759-c64b-4320-b85b-2332fff4ed85"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "5f4dda5a-9a67-4f73-a1e1-9117d59a6015",
                            DateOfBirth = new DateTime(2002, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "LeonidTarasov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leonid",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Tarasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONIDTARASOV@GMAIL.COM",
                            NormalizedUserName = "LEONIDTARASOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbwsPqJJQBn4s68aWFlKczaHiNqn7gtadQj8iMoogJhEcEXqxV7xdL51/R9E3cA9Q==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "08542d15-f711-401b-a7d3-7195103f5b63",
                            TwoFactorEnabled = false,
                            UserName = "LeonidTarasov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d2d6dc46-025c-4034-80c8-8bb7e1d54098"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "ec2f2e0e-f913-48b3-8554-13318de6d2b4",
                            DateOfBirth = new DateTime(2007, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarkMarkov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Markov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKMARKOV@GMAIL.COM",
                            NormalizedUserName = "MARKMARKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7j+rIv5EOtCk/oTGYvWsuLes0qfz2zLK+Kg2WC9zoZ/gEp+EgdCRWmTsrrf/ycRg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "dc26fecf-93f3-4dd9-93e2-f5681399f7be",
                            TwoFactorEnabled = false,
                            UserName = "MarkMarkov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9410107f-8e37-45a7-8d3a-bcabb2abda45"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "c8e4d2c2-e035-4f86-beb3-c4bf453404e0",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaFilatova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Filatova",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAFILATOVA@GMAIL.COM",
                            NormalizedUserName = "POLINAFILATOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvyCJ3kUryvS09VZ6XpiNAKKC72Dq5Cq3azPTdjBvjiJWGdOc4FD3klrMoLxF5aMQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "c441dff5-1100-4e0f-af9f-ec295653caad",
                            TwoFactorEnabled = false,
                            UserName = "PolinaFilatova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bdb4c580-01ee-41c4-93f9-6d64a4778370"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "0f14c670-47a8-48b0-bb2d-51698d5813c4",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaPopova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Popova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAPOPOVA@GMAIL.COM",
                            NormalizedUserName = "ANNAPOPOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/CUqLqTWPKVVi760uHEXFoFyi40Wnkr+eWG8XPVnFgrdYd/iJwZn+FgeZCS/08Aw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "2c3efc61-824c-44df-906f-d98b490f46f4",
                            TwoFactorEnabled = false,
                            UserName = "AnnaPopova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("abc953f6-d6ff-464b-9539-c95ee111f006"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "76f43833-3733-40d6-bb09-ba97f8aed4df",
                            DateOfBirth = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaSolovyeva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Solovyeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNASOLOVYEVA@GMAIL.COM",
                            NormalizedUserName = "ANNASOLOVYEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMs7HMeZpWBIrm7hJ+j5lTwGXwTg2rxHS3pshsuopYRJRa49oSsqjVXATQd7vWXpug==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "40f2ac39-8405-4d58-8251-6cafe6f8a509",
                            TwoFactorEnabled = false,
                            UserName = "AnnaSolovyeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7d8780f7-15b4-4b56-91e1-6d6e16012477"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "6397208a-21cc-46ff-9e20-87ec5afcbcfa",
                            DateOfBirth = new DateTime(1965, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaKarenina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Karenina",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAKARENINA@GMAIL.COM",
                            NormalizedUserName = "ANNAKARENINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHZ6+9038t3AVdCOqjhBUmD6orZq3ndH2/tCoV1l/CIxghISKknW5aSmasbuKDbfZg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "d7f9c9c7-6f92-45d8-9f06-7bf68ad5f501",
                            TwoFactorEnabled = false,
                            UserName = "AnnaKarenina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ffb5bbe2-debf-4f3f-805e-32167b700e4a"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "d25c65ad-1ba0-4f4b-991f-8f2f5fabc045",
                            DateOfBirth = new DateTime(1975, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaGrishina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Grishina",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAGRISHINA@GMAIL.COM",
                            NormalizedUserName = "POLINAGRISHINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEqNQovXo8d32TwCh4DLwlL6j77lpsehhC+JjLIlHWprLGJFNVciHpMXzdKUbuG/3g==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "f59fde68-8ec1-4300-88d7-102753b11783",
                            TwoFactorEnabled = false,
                            UserName = "PolinaGrishina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1caabeb4-fa16-46c9-8ef0-e8009955d916"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "462a1f49-cd47-404f-b093-f75f891d9d74",
                            DateOfBirth = new DateTime(2000, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DaryaNikitina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Nikitina",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARYANIKITINA@GMAIL.COM",
                            NormalizedUserName = "DARYANIKITINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJnMzIoc1IZ50pDXokIXpu5MHZ+T1xKpjcKqGI0S9F42ggfcvmEhOkqGiWUtPcaxzg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "e0cbf827-7cd6-4dae-a965-b78b944119e9",
                            TwoFactorEnabled = false,
                            UserName = "DaryaNikitina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a3e0cceb-a4b9-4877-b3a0-b7991d1a45f2"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "0c80ea8b-95f1-4394-a1ca-35533b8c04b3",
                            DateOfBirth = new DateTime(1991, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "EvaAndreevaa@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eva",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Andreeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVAANDREEVA@GMAIL.COM",
                            NormalizedUserName = "EVAANDREEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELoxb6/xLGVIVA92djlKbakU/mdywze0ZoLaRHpEoZBovVJXI+6hTfiBA98cmjCwtw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "6a67784f-ba0a-41d4-8d77-15c564436604",
                            TwoFactorEnabled = false,
                            UserName = "EvaAndreeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("13765215-c5c6-4dfe-a8e5-5b51300e8f69"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "7f883525-d24c-4446-a439-59598d634f45",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MilanaErmakova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Milana",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ermakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILANAERMAKOVA@GMAIL.COM",
                            NormalizedUserName = "MILANAERMAKOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKXRrAddzcpomxAwYxqSq7N2FAs5CqQx86/lfwl493glD3X0QE5j8GJ358tEM+GH1A==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "34d47494-7821-437c-9a01-d5c88b933835",
                            TwoFactorEnabled = false,
                            UserName = "MilanaErmakova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("be6f2919-9dca-4b54-a788-02cef50c6b1b"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "37a4cd38-549e-4e1a-ab91-010620bb9375",
                            DateOfBirth = new DateTime(1961, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlisaGorbacheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisa",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Gorbacheva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISAGORBACHEVA@GMAIL.COM",
                            NormalizedUserName = "ALISAGORBACHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKnk9i05Jon0+nhQNBLQZLtts/2kR7R3VFWciFr4xG7yQ4w0uUg9DoYSU+xTb+bdAw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "c61ac6b3-d923-4a70-bec0-4d1493d577be",
                            TwoFactorEnabled = false,
                            UserName = "AlisaGorbacheva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b587585c-344b-4e35-9df0-90723c5114ba"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "13c45b63-1597-4666-bacf-793520e56252",
                            DateOfBirth = new DateTime(1999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SofiyaIvanova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sofiya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIYAIVANOVA@GMAIL.COM",
                            NormalizedUserName = "SOFIYAIVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPzkvH0n/OUhj3VE32wBVK2Rzt/sDhNtVqSEbxI2e6vLE0q9N1jqq3r4Q8pDixpNRQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "652398f4-873a-49bf-9f94-c89f22a8e597",
                            TwoFactorEnabled = false,
                            UserName = "SofiyaIvanova@gmail.com"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 468, DateTimeKind.Utc).AddTicks(9278),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 468, DateTimeKind.Utc).AddTicks(9293),
                            Name = "Man"
                        },
                        new
                        {
                            Id = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 469, DateTimeKind.Utc).AddTicks(401),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 469, DateTimeKind.Utc).AddTicks(404),
                            Name = "Woman"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("SenderId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c8b430f-99bf-460d-903e-198728353a72"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6248),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6255),
                            Name = "Контент сексуального характера"
                        },
                        new
                        {
                            Id = new Guid("0d50b5d6-2274-4f74-a478-7671242e1348"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6751),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6754),
                            Name = "Жестокие или отталкивающие сцены"
                        },
                        new
                        {
                            Id = new Guid("83ba1239-4ef7-44a7-ae91-c5c9d0e6c100"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6765),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6766),
                            Name = "Оскорбления или проявления нетерпимости"
                        },
                        new
                        {
                            Id = new Guid("06568472-51b4-4292-b7e0-a220b789c885"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6771),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6772),
                            Name = "Вредные или опасные действия"
                        },
                        new
                        {
                            Id = new Guid("520eeb61-256a-4edd-9476-5fbe69cc3f20"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6775),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6776),
                            Name = "Жестокое обращение с детьми"
                        },
                        new
                        {
                            Id = new Guid("516fff94-dfd1-4c94-bebd-9498048eac3d"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6782),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6783),
                            Name = "Нарушение моих прав"
                        },
                        new
                        {
                            Id = new Guid("bacc901a-c8fd-4f8c-b4f7-30e8a5b0d502"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6787),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6787),
                            Name = "Пропаганда терроризма"
                        },
                        new
                        {
                            Id = new Guid("7eca2608-2bf8-482b-a630-8e7eb2bc8724"),
                            DateCreated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6790),
                            DateUpdated = new DateTime(2021, 11, 25, 23, 11, 41, 658, DateTimeKind.Utc).AddTicks(6791),
                            Name = "Спам или ложная информация"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c"),
                            ConcurrencyStamp = "1c7c1eff-decd-45bb-a062-0ffb9a514141",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d821eb23-2337-4e31-a53d-fcec01900507"),
                            ConcurrencyStamp = "a14fd088-f4a5-420b-8291-6b7ddc9cd1fe",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            RoleId = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Order", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DatingService.Domain.Entities.Image", "Image")
                        .WithOne("Post")
                        .HasForeignKey("DatingService.Domain.Entities.Post", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedReports")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Entities.ReportCategory", "Category")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentReports")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedReports");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentReports");

                    b.Navigation("SentRequests");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
