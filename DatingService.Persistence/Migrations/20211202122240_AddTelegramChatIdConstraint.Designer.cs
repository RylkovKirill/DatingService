// <auto-generated />
using System;
using DatingService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211202122240_AddTelegramChatIdConstraint")]
    partial class AddTelegramChatIdConstraint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserChat");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AnyLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PostCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TelegramChatId")
                        .HasColumnType("float");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TelegramChatId")
                        .IsUnique()
                        .HasFilter("[TelegramChatId] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "16f71db0-c263-422e-a707-b37fa15b98a7",
                            DateOfBirth = new DateTime(2001, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kirill.rylkov.2001@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kirill",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Rylkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            NormalizedUserName = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECKuFMYjPlgtrrdlTVmU9Ld2OQ4s16MSpU7SKFKwjciO1RiXQxTzTDYbnouKAqrWkg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "8e5ca17e-0c9f-49d5-8ad5-f142a7168e47",
                            TwoFactorEnabled = false,
                            UserName = "kirill.rylkov.2001@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b72abb26-30ee-4fbd-843e-c1c9712f7f2a"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "91c38813-ec2f-4e73-9018-2923bb0e7960",
                            DateOfBirth = new DateTime(1985, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MaximSkvortsov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maxim",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Skvortsov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIMSKVORTSOV@GMAIL.COM",
                            NormalizedUserName = "MAXIMSKVORTSOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJzxpbQAR7GnClTzqYzfvvYKc+k2b3lz0rl2RbQlL3qNGMg099LQ1pS5IqkR15s2g==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "1f3f739c-cb8d-4093-9b9f-963ab0b0ac77",
                            TwoFactorEnabled = false,
                            UserName = "MaximSkvortsov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("19678e73-2240-43c1-bc08-726405e9810f"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "134235ff-2093-4b81-8bbe-d0664ae88525",
                            DateOfBirth = new DateTime(1970, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TimofeyFedorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Timofey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Fedorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOFEYFEDOROV@GMAIL.COM",
                            NormalizedUserName = "TIMOFEYFEDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENnT9cJHA6lbkXWHkU5GrlvHAZS9VixIldRwaA6UG5KuIPs++DUkvluTmiqcHwLvwA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "ba527357-368b-4ecd-89f4-2ac3f8df88c1",
                            TwoFactorEnabled = false,
                            UserName = "TimofeyFedorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("959fad98-c404-4b2e-a4b5-2da34b051182"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "b6ee70a1-c816-4e4b-9480-6838c5cccc79",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NikitaSidorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Sidorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKITASIDOROV@GMAIL.COM",
                            NormalizedUserName = "NIKITASIDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFBMhBWrH30Z4UCHha1YxGRcGJjaXHulqvJdYTb4ZhljU9NG+rvwKIjKCsKPiCZeTQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "2d083900-3350-49b3-9b03-90d593c908c8",
                            TwoFactorEnabled = false,
                            UserName = "NikitaSidorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a2c8f466-4460-46d9-a3e1-849542257eda"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "c4916c1a-0577-4286-86e6-c33277bc0f8d",
                            DateOfBirth = new DateTime(1986, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexeyShapavalov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Shapavalov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            NormalizedUserName = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENeA/aQt513O4GIqT+gNM5TEigGaSuYdUQOdAX2Pe5PbD0MTsGfMHaS6irPnVbvrcw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "546ef68f-8d0a-4f89-b8ef-f52a29721d8d",
                            TwoFactorEnabled = false,
                            UserName = "AlexeyShapavalov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("15bce5d6-b3c2-431b-ac4b-7d87d86de00e"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "0095ebba-6082-403b-a58d-baba5cca0429",
                            DateOfBirth = new DateTime(1954, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GeorgeKlimov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "George",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Klimov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGEKLIMOV@GMAIL.COM",
                            NormalizedUserName = "GEORGEKLIMOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELH+yE1/R2Ntoqo6nSyuHYBMVxFn9GuV9aF4LbzjqZjg9CBld5EPvZ9Tjm97YOzKwg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "6e6f3942-0582-4ead-803c-1a7e01b45bf5",
                            TwoFactorEnabled = false,
                            UserName = "GeorgeKlimov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("186fdbe7-3b56-47bf-9e4b-3ec743375e8e"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "16bf97eb-2819-4280-b6a1-ef101320a4fc",
                            DateOfBirth = new DateTime(1980, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexanderBalashov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexander",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Balashov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDERBALASHOV@GMAIL.COM",
                            NormalizedUserName = "ALEXANDERBALASHOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHHH8XBO+9G0xwtRp48z5Y7mTGXDKDEdp9eUfAaSqIbbX+LzOzVVAGtSs0DgbWNYgg==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "8b1ad3b3-5c5f-4dae-81d3-a94d1b62a7e2",
                            TwoFactorEnabled = false,
                            UserName = "AlexanderBalashov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("424801eb-4028-47de-b02e-b2260e4adbaf"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "b5627d9a-cdfa-4355-9b63-4c95cc4f07ba",
                            DateOfBirth = new DateTime(2005, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DmitriiGusev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dmitrii",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Gusev",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRIIGUSEV@GMAIL.COM",
                            NormalizedUserName = "DMITRIIGUSEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENBiyTKXcy/ZLBFGgIBQz5h1RyjFTi+EKnGhkJ+9sCzkWSyPHV2vhdCnr1cgehx8aQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "d9bd286a-4430-4dfd-83e8-6a6a09347748",
                            TwoFactorEnabled = false,
                            UserName = "DmitriiGusev@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ea66d92d-2dba-48dc-a240-5d20b653223b"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "00a10743-7794-4b65-801a-0f1800e7ea80",
                            DateOfBirth = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ArtemOvchinnikov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Artem",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Ovchinnikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            NormalizedUserName = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOfVgL0DysIZgEF3eWI4YCUI3MseMoBfFCh0ir/jCCv6me3sULGe52TUQi1KTqaTww==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "92330180-ee2b-4e19-9302-70b5048795e7",
                            TwoFactorEnabled = false,
                            UserName = "ArtemOvchinnikov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9041f759-c64b-4320-b85b-2332fff4ed85"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "487283c3-4ba6-4614-9d7a-e2afd7492ebd",
                            DateOfBirth = new DateTime(2002, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "LeonidTarasov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leonid",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Tarasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONIDTARASOV@GMAIL.COM",
                            NormalizedUserName = "LEONIDTARASOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEURc0P8FXQGHtRXuTSVCKqXVWeMSerJTjHup5NBGVrENSn3n5/Mxrog4toX8JMwog==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "db242478-b239-4e20-81ca-8aa83c57aa7e",
                            TwoFactorEnabled = false,
                            UserName = "LeonidTarasov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d2d6dc46-025c-4034-80c8-8bb7e1d54098"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "68cdf865-a735-43f2-a247-35c9e3186bb6",
                            DateOfBirth = new DateTime(2007, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarkMarkov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Markov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKMARKOV@GMAIL.COM",
                            NormalizedUserName = "MARKMARKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKzcTP5V9I+fe6gS2Cv1UfHtEtBinc9pYAxh+EfmlWj5lZ90EJzd16PWs/xfxKq60g==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "6ce588a6-c9ba-4b28-860f-0fe0d5d89f78",
                            TwoFactorEnabled = false,
                            UserName = "MarkMarkov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9410107f-8e37-45a7-8d3a-bcabb2abda45"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "30b3bd96-54fa-4d34-b9ab-de6dc092cbf2",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaFilatova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Filatova",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAFILATOVA@GMAIL.COM",
                            NormalizedUserName = "POLINAFILATOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEES5kxpbA4kqmSV4aWn3jppRJeasLAckJfjYAZSrbKYEgvthQgGtk1aO6TG4XiIcZA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "9d69c179-dd90-491a-9c24-6557325460ec",
                            TwoFactorEnabled = false,
                            UserName = "PolinaFilatova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bdb4c580-01ee-41c4-93f9-6d64a4778370"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "47d19a6e-b1e8-4327-8a74-1dc92eb76bf5",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaPopova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Popova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAPOPOVA@GMAIL.COM",
                            NormalizedUserName = "ANNAPOPOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP5zN5zhZNAwR6Rsm4F6g0MekzZg/FsWT8iqFdqB3vOgZzLE5063Kv+RNT1ZxWi5OQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "e3e08d0a-936b-4f70-807a-93a5703935e3",
                            TwoFactorEnabled = false,
                            UserName = "AnnaPopova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("abc953f6-d6ff-464b-9539-c95ee111f006"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "105493e5-0890-4948-8099-d6619fc8300d",
                            DateOfBirth = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaSolovyeva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Solovyeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNASOLOVYEVA@GMAIL.COM",
                            NormalizedUserName = "ANNASOLOVYEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELo1GXXyaTR7xQXcq7sdCdt1VHD5la8TfbPIQLw44jr666NUPtsx3OEkpSQ0MaRIkA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "d8d4f5fa-791a-4a62-8547-6c161764a19b",
                            TwoFactorEnabled = false,
                            UserName = "AnnaSolovyeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7d8780f7-15b4-4b56-91e1-6d6e16012477"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "ab5dbd80-f77c-40b9-a10b-62291a1eff05",
                            DateOfBirth = new DateTime(1965, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaKarenina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Karenina",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAKARENINA@GMAIL.COM",
                            NormalizedUserName = "ANNAKARENINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2w+fZRfFRhW1JsMwm02QUAt1ucQkrIz2bT/FyeBdIDRTQMJNfvUGXM+mcB+4rfGA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "f3d4e27b-47d9-45d9-8620-0a8593d43495",
                            TwoFactorEnabled = false,
                            UserName = "AnnaKarenina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ffb5bbe2-debf-4f3f-805e-32167b700e4a"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "73d8d8c6-5ee8-457a-9060-e6cbec43ce4d",
                            DateOfBirth = new DateTime(1975, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaGrishina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Grishina",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAGRISHINA@GMAIL.COM",
                            NormalizedUserName = "POLINAGRISHINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAg6X9GwGiaog5uVVy3k1pAProws0+Z2TuidfSdiH3aq2ImXmjSC0CV0a4AatlPZBw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "01faf1d4-24e0-4814-9fb5-db31b32ff28a",
                            TwoFactorEnabled = false,
                            UserName = "PolinaGrishina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1caabeb4-fa16-46c9-8ef0-e8009955d916"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "bb1e3360-28d4-4b73-bd1a-fe26c4d4aadc",
                            DateOfBirth = new DateTime(2000, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DaryaNikitina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Nikitina",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARYANIKITINA@GMAIL.COM",
                            NormalizedUserName = "DARYANIKITINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKuCn118JxY369BfmcUut5U2DN5QpUvEZDDuLAd5ZhZMHZVNl6mzb8/zTEFxf77LWA==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "9fcef6e9-1495-463a-bb30-3784424eaca3",
                            TwoFactorEnabled = false,
                            UserName = "DaryaNikitina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a3e0cceb-a4b9-4877-b3a0-b7991d1a45f2"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "f1fca2b7-a339-463b-948a-f7d10dfbcf5f",
                            DateOfBirth = new DateTime(1991, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "EvaAndreevaa@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eva",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Andreeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVAANDREEVA@GMAIL.COM",
                            NormalizedUserName = "EVAANDREEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENQgYeB7zoHpmiuihOIkVDpx4N66A/oFfFdbDmUy+VQ2ViJnznDBumny9//+tqtMZQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "3a65122c-8499-4cb9-a943-e5cad8fa3ef0",
                            TwoFactorEnabled = false,
                            UserName = "EvaAndreeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("13765215-c5c6-4dfe-a8e5-5b51300e8f69"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "8dcd6886-62ca-48d8-8334-26f2370f4280",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MilanaErmakova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Milana",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ermakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILANAERMAKOVA@GMAIL.COM",
                            NormalizedUserName = "MILANAERMAKOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBQpjYBqHomxD7xCcEj8XGP2Cuc4IKLw2I+x/DuqyfjKw3w4Lkr5Ez7DnZfN0OZRVw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "1b37497a-4a0a-4018-a078-0b2ce28092f4",
                            TwoFactorEnabled = false,
                            UserName = "MilanaErmakova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("be6f2919-9dca-4b54-a788-02cef50c6b1b"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "d4e4fc15-f67e-49d7-9af0-3de8d5c3fef3",
                            DateOfBirth = new DateTime(1961, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlisaGorbacheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisa",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Gorbacheva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISAGORBACHEVA@GMAIL.COM",
                            NormalizedUserName = "ALISAGORBACHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELwQXzpXY4wwzYtROs7AxgdwhhD96YTR9IrACrqW7BygYoS7tnLSJgDt6bjopYclHQ==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "15b53293-0eb6-4c5e-b5c6-341182fb9f6e",
                            TwoFactorEnabled = false,
                            UserName = "AlisaGorbacheva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b587585c-344b-4e35-9df0-90723c5114ba"),
                            AccessFailedCount = 0,
                            AnyLocation = false,
                            ConcurrencyStamp = "9083c4b3-4d74-4acc-966b-c601fb3a8b4b",
                            DateOfBirth = new DateTime(1999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SofiyaIvanova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sofiya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIYAIVANOVA@GMAIL.COM",
                            NormalizedUserName = "SOFIYAIVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENgQJM//RqaAtSGIXPFx34A41v0B3LJkgobtL4iBGFJKg/PzPeHSw7CXTKxizoIdMw==",
                            PhoneNumberConfirmed = false,
                            PostCount = 0,
                            SecurityStamp = "2a49c565-b4a1-48b0-b353-d5d58d793c4c",
                            TwoFactorEnabled = false,
                            UserName = "SofiyaIvanova@gmail.com"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 38, DateTimeKind.Utc).AddTicks(6255),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 38, DateTimeKind.Utc).AddTicks(6265),
                            Name = "Man"
                        },
                        new
                        {
                            Id = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 38, DateTimeKind.Utc).AddTicks(7221),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 38, DateTimeKind.Utc).AddTicks(7224),
                            Name = "Woman"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("SenderId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("ReportCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c8b430f-99bf-460d-903e-198728353a72"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5241),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5250),
                            Name = "Контент сексуального характера"
                        },
                        new
                        {
                            Id = new Guid("0d50b5d6-2274-4f74-a478-7671242e1348"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5745),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5748),
                            Name = "Жестокие или отталкивающие сцены"
                        },
                        new
                        {
                            Id = new Guid("83ba1239-4ef7-44a7-ae91-c5c9d0e6c100"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5765),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5766),
                            Name = "Оскорбления или проявления нетерпимости"
                        },
                        new
                        {
                            Id = new Guid("06568472-51b4-4292-b7e0-a220b789c885"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5771),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5771),
                            Name = "Вредные или опасные действия"
                        },
                        new
                        {
                            Id = new Guid("520eeb61-256a-4edd-9476-5fbe69cc3f20"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5775),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5776),
                            Name = "Жестокое обращение с детьми"
                        },
                        new
                        {
                            Id = new Guid("516fff94-dfd1-4c94-bebd-9498048eac3d"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5782),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5783),
                            Name = "Нарушение моих прав"
                        },
                        new
                        {
                            Id = new Guid("bacc901a-c8fd-4f8c-b4f7-30e8a5b0d502"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5786),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5787),
                            Name = "Пропаганда терроризма"
                        },
                        new
                        {
                            Id = new Guid("7eca2608-2bf8-482b-a630-8e7eb2bc8724"),
                            DateCreated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5790),
                            DateUpdated = new DateTime(2021, 12, 2, 12, 22, 39, 222, DateTimeKind.Utc).AddTicks(5791),
                            Name = "Спам или ложная информация"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c"),
                            ConcurrencyStamp = "79802bec-9f71-4224-981f-e5e92a6adba8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("d821eb23-2337-4e31-a53d-fcec01900507"),
                            ConcurrencyStamp = "fc648821-813f-4228-b87d-53d586f39794",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            RoleId = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Order", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DatingService.Domain.Entities.Image", "Image")
                        .WithOne("Post")
                        .HasForeignKey("DatingService.Domain.Entities.Post", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedReports")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Entities.ReportCategory", "Category")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentReports")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedReports");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentReports");

                    b.Navigation("SentRequests");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
