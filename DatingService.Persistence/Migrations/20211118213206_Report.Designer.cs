// <auto-generated />
using System;
using DatingService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211118213206_Report")]
    partial class Report
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.Property<Guid>("ChatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserChat");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasFilter("[AvatarId] IS NOT NULL");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64d2e30f-9d7b-4fee-87e9-96708fb8b7e9",
                            DateOfBirth = new DateTime(2001, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kirill.rylkov.2001@gmail.comm",
                            EmailConfirmed = true,
                            FirstName = "Kirill",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Rylkov",
                            LockoutEnabled = false,
                            NormalizedEmail = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            NormalizedUserName = "KIRILL.RYLKOV.2001@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFbNNYt33eOGU2jbUaium+1e44Gnv7fiM9GKpw5w/P0bPA8DEnCBe9Xcm2LbVzr79A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0d1f3f7-0aa5-4865-9f80-f3624363a980",
                            TwoFactorEnabled = false,
                            UserName = "kirill.rylkov.2001@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b72abb26-30ee-4fbd-843e-c1c9712f7f2a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e49199c7-71b4-43cf-a7a5-0f02387dbd97",
                            DateOfBirth = new DateTime(1985, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MaximSkvortsov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Maxim",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Skvortsov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAXIMSKVORTSOV@GMAIL.COM",
                            NormalizedUserName = "MAXIMSKVORTSOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIhfUuZL0eU043vACgr3pQ3Ivd9o3vBsr7+4jGPGCYIDdqTX+5Z0VyZ0jd2bd8CysQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb80b309-8b1e-456a-969b-f7c22d7250ff",
                            TwoFactorEnabled = false,
                            UserName = "MaximSkvortsov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("19678e73-2240-43c1-bc08-726405e9810f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af764266-7f71-4feb-ac48-738432947479",
                            DateOfBirth = new DateTime(1970, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TimofeyFedorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Timofey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Fedorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "TIMOFEYFEDOROV@GMAIL.COM",
                            NormalizedUserName = "TIMOFEYFEDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDxUD1c+T/iRyBxKg65nz9nRSy69sxqSdjWp4B3tGESFPmOnqbFPGfBWk1ZKcqwePA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b73a7da8-87a5-4797-ac1f-4386d964aeb4",
                            TwoFactorEnabled = false,
                            UserName = "TimofeyFedorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("959fad98-c404-4b2e-a4b5-2da34b051182"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d29bc8e-1efb-479e-ba3d-5bb7568abe45",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "NikitaSidorov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Sidorov",
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKITASIDOROV@GMAIL.COM",
                            NormalizedUserName = "NIKITASIDOROV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKiRozLjMk9mHyFumXDd4AzAjS3hMAiEsTVIPrhags0K6s29m6z6fpVDKxDogqkNZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "551e2f37-ad68-4a77-9c0d-4c48b19c6f58",
                            TwoFactorEnabled = false,
                            UserName = "NikitaSidorov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a2c8f466-4460-46d9-a3e1-849542257eda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b42c2c1-4522-455f-9b66-febffaee1028",
                            DateOfBirth = new DateTime(1986, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexeyShapavalov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexey",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Shapavalov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            NormalizedUserName = "ALEXEYSHAPAVALOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMzfIgEUClw3TCjBU8ppr/SPz8ZWKX6AEmtNcDe1DDfjlB5B4EICa2X4M79iZA+VtA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e18529f-6833-40c6-8a57-12cfad6bf47a",
                            TwoFactorEnabled = false,
                            UserName = "AlexeyShapavalov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("15bce5d6-b3c2-431b-ac4b-7d87d86de00e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a6a7abb-d9b2-4dd3-b948-769a74d78ff9",
                            DateOfBirth = new DateTime(1954, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "GeorgeKlimov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "George",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Klimov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGEKLIMOV@GMAIL.COM",
                            NormalizedUserName = "GEORGEKLIMOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDb21hAeT5Sshlwzzd9OramFa6CzsuFAU4eIfn0b0eJSUfKlThgg0YAGD7f8SoF6uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbeb5e85-f85a-45e2-8950-166c9f6d6a75",
                            TwoFactorEnabled = false,
                            UserName = "GeorgeKlimov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("186fdbe7-3b56-47bf-9e4b-3ec743375e8e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d5106d5-0490-4791-a429-510b194eeffe",
                            DateOfBirth = new DateTime(1980, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlexanderBalashov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alexander",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Balashov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDERBALASHOV@GMAIL.COM",
                            NormalizedUserName = "ALEXANDERBALASHOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIlaHgos3S3FVk5eGqtCTBrJwFCVxqSeruB1Hf23JQN169xxsBENwO9bplCnKl4gIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a1706e0-ebca-4fb2-951c-a00fd63c9cfc",
                            TwoFactorEnabled = false,
                            UserName = "AlexanderBalashov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("424801eb-4028-47de-b02e-b2260e4adbaf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ede46070-1e8d-41ee-8ae3-3805e3553b99",
                            DateOfBirth = new DateTime(2005, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DmitriiGusev@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Dmitrii",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Gusev",
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRIIGUSEV@GMAIL.COM",
                            NormalizedUserName = "DMITRIIGUSEV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENasKK0eKLgN5D8nkKMSg/cvR2AJrKTzT1HBxwTIZPafRt2+ew1eTk2Rd9sJD9vtyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92a01683-5124-4260-b9f4-120d665fe6cd",
                            TwoFactorEnabled = false,
                            UserName = "DmitriiGusev@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ea66d92d-2dba-48dc-a240-5d20b653223b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a62d7666-a8d0-49e2-a45e-253072ebe352",
                            DateOfBirth = new DateTime(2010, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ArtemOvchinnikov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Artem",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Ovchinnikov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            NormalizedUserName = "ARTEMOVCHINNIKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOtY5G1ymNPfIe9K9x88Np7HOx3HJFZGwgwkpELzaIjpVoHROsPcC15jQ9lSCLzUFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93686821-b431-4739-94cb-55931a1abdef",
                            TwoFactorEnabled = false,
                            UserName = "ArtemOvchinnikov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9041f759-c64b-4320-b85b-2332fff4ed85"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc1eafa7-ef56-453f-8d1e-6454967658ac",
                            DateOfBirth = new DateTime(2002, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "LeonidTarasov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Leonid",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Tarasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONIDTARASOV@GMAIL.COM",
                            NormalizedUserName = "LEONIDTARASOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECYLCoQmEIwOca0hm9LMWZwPc1t4R+wfTFCDWUNZ2YiTaGZtEEh2460PTLzB9KnNzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd6a501f-1970-4a0c-89fc-b6167add6427",
                            TwoFactorEnabled = false,
                            UserName = "LeonidTarasov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("d2d6dc46-025c-4034-80c8-8bb7e1d54098"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e70d9f0c-a2bb-4b85-b8cb-9df8e2d0d1d5",
                            DateOfBirth = new DateTime(2007, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MarkMarkov@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            GenderId = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            LastName = "Markov",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARKMARKOV@GMAIL.COM",
                            NormalizedUserName = "MARKMARKOV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHUnf1ZzD9eVesv8mWwkLm7ZWIfUlOYyUD0Thra6mFRSE9W1DL1NdQXFPRBcp+L1lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05ef9b41-6a26-4ecf-ae8e-da5421aa11e1",
                            TwoFactorEnabled = false,
                            UserName = "MarkMarkov@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("9410107f-8e37-45a7-8d3a-bcabb2abda45"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "390d596a-4082-45dc-bfc3-f670ed1cf896",
                            DateOfBirth = new DateTime(1964, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaFilatova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Filatova",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAFILATOVA@GMAIL.COM",
                            NormalizedUserName = "POLINAFILATOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPuUpGO26MW7nu1AfmV6FS1JA/iUU8ND/9WDJmQZv7vCJAh1AsON9F21vUf5OEu6DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ed17dc3-3499-4465-a46d-9bd8c2ca04b8",
                            TwoFactorEnabled = false,
                            UserName = "PolinaFilatova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("bdb4c580-01ee-41c4-93f9-6d64a4778370"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f34d5cbb-5f81-41b1-8423-263d9a149781",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaPopova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Popova",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAPOPOVA@GMAIL.COM",
                            NormalizedUserName = "ANNAPOPOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKtJRyPO/M2cnm/yoSoEg/v4Wt+1bxtK3/XbUZVAms5GhULUChShoRv/8O5Sbo0D/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb7657d5-d53d-4cd0-a1a6-29b7094e11e1",
                            TwoFactorEnabled = false,
                            UserName = "AnnaPopova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("abc953f6-d6ff-464b-9539-c95ee111f006"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b9d1c2e-81a8-4936-9423-ef8889c166b2",
                            DateOfBirth = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaSolovyeva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Solovyeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNASOLOVYEVA@GMAIL.COM",
                            NormalizedUserName = "ANNASOLOVYEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2nX8AQDq0tD5vZtpM0zKwa6rgYiqqRqliuv2E4wUtxKVOYI+DrzKOr9JzmFmwK4A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35e6b9a7-144c-4f20-b493-97975efba81f",
                            TwoFactorEnabled = false,
                            UserName = "AnnaSolovyeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("7d8780f7-15b4-4b56-91e1-6d6e16012477"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69a96a32-e04e-4ec0-86d6-52090bd546e8",
                            DateOfBirth = new DateTime(1965, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AnnaKarenina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anna",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Karenina",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNAKARENINA@GMAIL.COM",
                            NormalizedUserName = "ANNAKARENINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENL3tE/iIyBRTLGNs1YLJJNfdR0pzBoYqiZnDU6bWAWkhVTWIKgMzm81xUHYF7IZMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2416729-14e0-4e0b-a280-738d4ca33454",
                            TwoFactorEnabled = false,
                            UserName = "AnnaKarenina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("ffb5bbe2-debf-4f3f-805e-32167b700e4a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c68b6ad-1df1-47a7-9bd3-13e270dcbe43",
                            DateOfBirth = new DateTime(1975, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "PolinaGrishina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Polina",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Grishina",
                            LockoutEnabled = false,
                            NormalizedEmail = "POLINAGRISHINA@GMAIL.COM",
                            NormalizedUserName = "POLINAGRISHINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH53PM646V3PMRz6/C+1xEN9cx3oV6KsFzJFY5AbXmm3i4caeEZUS1VCq+ZK+jY8Mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b09f5567-2050-4d0a-a5b3-11571f1e3560",
                            TwoFactorEnabled = false,
                            UserName = "PolinaGrishina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("1caabeb4-fa16-46c9-8ef0-e8009955d916"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7533f6e-4f55-4202-9f75-54fa1ed315ac",
                            DateOfBirth = new DateTime(2000, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "DaryaNikitina@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Darya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Nikitina",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARYANIKITINA@GMAIL.COM",
                            NormalizedUserName = "DARYANIKITINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQM44VQ4H+R79MfZ2EEz7XbbvzENor0G906RQ1ie7O5mPvprTGn9ZC3NDV2OOBixQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e21f7188-fe55-4081-8d39-14aef4befa31",
                            TwoFactorEnabled = false,
                            UserName = "DaryaNikitina@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("a3e0cceb-a4b9-4877-b3a0-b7991d1a45f2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ee67e06-90fb-49cf-929f-cc36cf68b41f",
                            DateOfBirth = new DateTime(1991, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "EvaAndreevaa@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Eva",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Andreeva",
                            LockoutEnabled = false,
                            NormalizedEmail = "EVAANDREEVA@GMAIL.COM",
                            NormalizedUserName = "EVAANDREEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/s5rVNq/HmSiOba3JhwrJZ5E9SeQASRppMOk5cIHWIgUNjOVW3Kw7L3rZ+mvGscA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fc6c232-a7b1-4fd9-b101-6f384031bd4c",
                            TwoFactorEnabled = false,
                            UserName = "EvaAndreeva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("13765215-c5c6-4dfe-a8e5-5b51300e8f69"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df4f10c6-6ccb-4b68-bbda-d13bc70d20cd",
                            DateOfBirth = new DateTime(1984, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "MilanaErmakova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Milana",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ermakova",
                            LockoutEnabled = false,
                            NormalizedEmail = "MILANAERMAKOVA@GMAIL.COM",
                            NormalizedUserName = "MILANAERMAKOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKwXcJkMJ3eEhXv+oNmxYWi8XT4oU/8dCaLAQKtmfezHnFXMvLPcFK+EJoAVmB+ipw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "240cb39a-0e5d-45d6-8b21-3f5968918ebb",
                            TwoFactorEnabled = false,
                            UserName = "MilanaErmakova@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("be6f2919-9dca-4b54-a788-02cef50c6b1b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b0ce409-7179-475f-869d-a6c357f14ef9",
                            DateOfBirth = new DateTime(1961, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlisaGorbacheva@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alisa",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Gorbacheva",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALISAGORBACHEVA@GMAIL.COM",
                            NormalizedUserName = "ALISAGORBACHEVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbRXL2GgDXK/nLE7HHWr/yWJ0P3H5Ke35E/yJ055Wjqt0YR8lpP4758N5YwSf8VkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8be66d23-f2a1-4daa-943d-52365c8d9d6b",
                            TwoFactorEnabled = false,
                            UserName = "AlisaGorbacheva@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("b587585c-344b-4e35-9df0-90723c5114ba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41f08b7f-cfb2-4a30-a6db-c08ae87d10d7",
                            DateOfBirth = new DateTime(1999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "SofiyaIvanova@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sofiya",
                            GenderId = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIYAIVANOVA@GMAIL.COM",
                            NormalizedUserName = "SOFIYAIVANOVA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEoWR8oG3Nb1oYFuLXCDuv8mpQCiRRbQiEC0HL2FS7sZUYx0mxPWrgaViDm6fUew3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "407a306c-f9be-43d2-91d7-1f011d850fb7",
                            TwoFactorEnabled = false,
                            UserName = "SofiyaIvanova@gmail.com"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Auth.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f71bcbe8-2f30-4f63-be7d-a90f46f39178"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 250, DateTimeKind.Utc).AddTicks(3768),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 250, DateTimeKind.Utc).AddTicks(3780),
                            Name = "Man"
                        },
                        new
                        {
                            Id = new Guid("b50075d8-0379-4b95-b0c2-50bba4509dab"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 250, DateTimeKind.Utc).AddTicks(4890),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 250, DateTimeKind.Utc).AddTicks(4892),
                            Name = "Woman"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReportCategoryId");

                    b.HasIndex("SenderId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c8b430f-99bf-460d-903e-198728353a72"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7051),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7062),
                            Name = "Контент сексуального характера"
                        },
                        new
                        {
                            Id = new Guid("0d50b5d6-2274-4f74-a478-7671242e1348"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7553),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7556),
                            Name = "Жестокие или отталкивающие сцены"
                        },
                        new
                        {
                            Id = new Guid("83ba1239-4ef7-44a7-ae91-c5c9d0e6c100"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7569),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7570),
                            Name = "Оскорбления или проявления нетерпимости"
                        },
                        new
                        {
                            Id = new Guid("06568472-51b4-4292-b7e0-a220b789c885"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7574),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7575),
                            Name = "Вредные или опасные действия"
                        },
                        new
                        {
                            Id = new Guid("520eeb61-256a-4edd-9476-5fbe69cc3f20"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7578),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7579),
                            Name = "Жестокое обращение с детьми"
                        },
                        new
                        {
                            Id = new Guid("516fff94-dfd1-4c94-bebd-9498048eac3d"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7585),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7585),
                            Name = "Нарушение моих прав"
                        },
                        new
                        {
                            Id = new Guid("bacc901a-c8fd-4f8c-b4f7-30e8a5b0d502"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7708),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7709),
                            Name = "Пропаганда терроризма"
                        },
                        new
                        {
                            Id = new Guid("7eca2608-2bf8-482b-a630-8e7eb2bc8724"),
                            DateCreated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7714),
                            DateUpdated = new DateTime(2021, 11, 18, 21, 32, 5, 538, DateTimeKind.Utc).AddTicks(7715),
                            Name = "Спам или ложная информация"
                        });
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c"),
                            ConcurrencyStamp = "e3cb38a0-7aad-406e-a8b1-eabf612749af",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("d821eb23-2337-4e31-a53d-fcec01900507"),
                            ConcurrencyStamp = "5bed4d4a-010f-4b37-8205-261f432cb4ef",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c6dd1e20-cce1-4299-be0c-862a2b681039"),
                            RoleId = new Guid("67397b47-b0e9-4e15-8b82-57c0884af92c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationUserChat", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.Avatar", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("DatingService.Domain.Auth.ApplicationUser", "AvatarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Avatar");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Message", b =>
                {
                    b.HasOne("DatingService.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("DatingService.Domain.Entities.Image", "Image")
                        .WithOne("Post")
                        .HasForeignKey("DatingService.Domain.Entities.Post", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Report", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedReports")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Entities.ReportCategory", "Category")
                        .WithMany("Reports")
                        .HasForeignKey("ReportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentReports")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Request", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Receiver")
                        .WithMany("ReceivedRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", "Sender")
                        .WithMany("SentRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DatingService.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatingService.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedReports");

                    b.Navigation("ReceivedRequests");

                    b.Navigation("SentReports");

                    b.Navigation("SentRequests");
                });

            modelBuilder.Entity("DatingService.Domain.Auth.Avatar", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Image", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DatingService.Domain.Entities.ReportCategory", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
